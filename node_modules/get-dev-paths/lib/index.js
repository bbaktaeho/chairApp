// Generated by CoffeeScript 2.3.0
var TypeError, fs, getDependencyPaths, getDevPaths, isNodeModules, nodeModulesRE, path;

TypeError = require('type-error');

path = require('path');

fs = require('fs');

getDevPaths = function(root, opts = {}) {
  var paths, search;
  if (typeof root !== 'string') {
    throw TypeError(String, root);
  }
  if (!path.isAbsolute(root)) {
    throw Error('`root` argument must be an absolute path');
  }
  paths = [];
  search = function(root) {
    var deps, err, pack;
    pack = path.join(root, 'package.json');
    if (!fs.existsSync(pack)) {
      return;
    }
    try {
      pack = JSON.parse(fs.readFileSync(pack, 'utf8'));
    } catch (error) {
      err = error;
      return typeof opts.onError === "function" ? opts.onError(new Error(`Failed to parse: ${pack}\n${err.message}`)) : void 0;
    }
    // We only care about non-dev dependencies.
    deps = pack.dependencies;
    if (!deps) {
      return;
    }
    root = path.join(root, 'node_modules');
    return fs.existsSync(root) && getDependencyPaths(root, deps).forEach(function(dep) {
      if (!isNodeModules(dep, opts)) {
        paths.push(dep);
        search(dep);
      }
    });
  };
  search(root);
  return paths;
};

module.exports = getDevPaths;


// Internal

nodeModulesRE = /\/node_modules\//;

isNodeModules = function(dep, opts) {
  var err;
  try {
    return nodeModulesRE.test(fs.realpathSync(dep));
  } catch (error) {
    err = error;
    if (typeof opts.onError === "function") {
      opts.onError(new Error(`Symlink leads to nowhere: ${dep}`));
    }
    return true;
  }
};

getDependencyPaths = function(root, deps) {
  var paths;
  paths = [];
  fs.readdirSync(root).forEach(function(name) {
    var dep, scope;
    if (name[0] === '.') {
      return;
    }
    dep = path.join(root, name);
    if (name[0] === '@') {
      scope = name;
      return fs.readdirSync(dep).forEach(function(name) {
        if (deps[scope + '/' + name]) {
          return paths.push(path.join(dep, name));
        }
      });
    } else if (deps[name]) {
      paths.push(dep);
    }
  });
  return paths;
};
